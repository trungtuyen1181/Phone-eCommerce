{"ast":null,"code":"import { ADD_TO_CART, UPDATE_CART, DELETE_ITEM_CART, // CHANGE_CARD,\nNEW_PRODUCT, ERROR_CART } from \"./action-types\";\nconst initState = {\n  items: [],\n  numberCart: true\n};\n\nconst cartReducer = (state = initState, action, payload) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      {\n        const items = state.items;\n        let isProductExists = false;\n        items.map(item => {\n          if (!isProductExists && item.id === payload.id) {\n            item.qty += payload.qty;\n            isProductExists = true;\n          }\n\n          return item;\n        });\n        const newItems = isProductExists ? items : [...items, payload];\n        localStorage.setItem(\"cart_items\", JSON.stringify(newItems));\n        return { ...state,\n          items: newItems\n        };\n      }\n\n    case UPDATE_CART:\n      {\n        return { ...state,\n          items: state.item.map(item => item.id === payload.id ? { ...item,\n            qty: item.qty += payload.qty\n          } : item)\n        };\n      }\n    // case CHANGE_CARD: {\n    //   return {\n    //     ...state,\n    //     items: state.item.map((item) =>\n    //       item.id === payload.id\n    //         ? { ...item, qty: (item.qty += payload.qty) }\n    //         : item\n    //     ),\n    //   };\n    // }\n\n    case DELETE_ITEM_CART:\n      {\n        return { ...state,\n          items: state.items.filter(item => item.id !== payload.id)\n        };\n      }\n\n    case NEW_PRODUCT:\n      {\n        // console.log(action.item);\n        return { ...state,\n          items: action.item\n        };\n      }\n\n    case ERROR_CART:\n      {\n        return { ...state\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer; // console.log(cartReducer);","map":{"version":3,"sources":["/Users/phamtrungtuyen/Projective/Phone_test/src/redux/reducers/reducer.js"],"names":["ADD_TO_CART","UPDATE_CART","DELETE_ITEM_CART","NEW_PRODUCT","ERROR_CART","initState","items","numberCart","cartReducer","state","action","payload","type","isProductExists","map","item","id","qty","newItems","localStorage","setItem","JSON","stringify","filter"],"mappings":"AAAA,SACEA,WADF,EAEEC,WAFF,EAGEC,gBAHF,EAIE;AACAC,WALF,EAMEC,UANF,QAOO,gBAPP;AASA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE,EADS;AAEhBC,EAAAA,UAAU,EAAE;AAFI,CAAlB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,SAAT,EAAoBK,MAApB,EAA4BC,OAA5B,KAAwC;AAC1D,UAAQD,MAAM,CAACE,IAAf;AACE,SAAKZ,WAAL;AAAkB;AAChB,cAAMM,KAAK,GAAGG,KAAK,CAACH,KAApB;AACA,YAAIO,eAAe,GAAG,KAAtB;AACAP,QAAAA,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AAClB,cAAI,CAACF,eAAD,IAAoBE,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA5C,EAAgD;AAC9CD,YAAAA,IAAI,CAACE,GAAL,IAAYN,OAAO,CAACM,GAApB;AACAJ,YAAAA,eAAe,GAAG,IAAlB;AACD;;AACD,iBAAOE,IAAP;AACD,SAND;AAOA,cAAMG,QAAQ,GAAGL,eAAe,GAAGP,KAAH,GAAW,CAAC,GAAGA,KAAJ,EAAWK,OAAX,CAA3C;AACAQ,QAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAnC;AACA,eAAO,EAAE,GAAGT,KAAL;AAAYH,UAAAA,KAAK,EAAEY;AAAnB,SAAP;AACD;;AACD,SAAKjB,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGQ,KADE;AAELH,UAAAA,KAAK,EAAEG,KAAK,CAACM,IAAN,CAAWD,GAAX,CAAgBC,IAAD,IACpBA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAApB,GACI,EAAE,GAAGD,IAAL;AAAWE,YAAAA,GAAG,EAAGF,IAAI,CAACE,GAAL,IAAYN,OAAO,CAACM;AAArC,WADJ,GAEIF,IAHC;AAFF,SAAP;AAQD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAKb,gBAAL;AAAuB;AACrB,eAAO,EACL,GAAGO,KADE;AAELH,UAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYiB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAAjD;AAFF,SAAP;AAID;;AAED,SAAKb,WAAL;AAAkB;AAChB;AACA,eAAO,EACL,GAAGM,KADE;AAELH,UAAAA,KAAK,EAAEI,MAAM,CAACK;AAFT,SAAP;AAID;;AACD,SAAKX,UAAL;AAAiB;AACf,eAAO,EACL,GAAGK;AADE,SAAP;AAGD;;AACD;AACE,aAAOA,KAAP;AAxDJ;AA0DD,CA3DD;;AA6DA,eAAeD,WAAf,C,CACA","sourcesContent":["import {\n  ADD_TO_CART,\n  UPDATE_CART,\n  DELETE_ITEM_CART,\n  // CHANGE_CARD,\n  NEW_PRODUCT,\n  ERROR_CART,\n} from \"./action-types\";\n\nconst initState = {\n  items: [],\n  numberCart: true,\n};\n\nconst cartReducer = (state = initState, action, payload) => {\n  switch (action.type) {\n    case ADD_TO_CART: {\n      const items = state.items;\n      let isProductExists = false;\n      items.map((item) => {\n        if (!isProductExists && item.id === payload.id) {\n          item.qty += payload.qty;\n          isProductExists = true;\n        }\n        return item;\n      });\n      const newItems = isProductExists ? items : [...items, payload];\n      localStorage.setItem(\"cart_items\", JSON.stringify(newItems));\n      return { ...state, items: newItems };\n    }\n    case UPDATE_CART: {\n      return {\n        ...state,\n        items: state.item.map((item) =>\n          item.id === payload.id\n            ? { ...item, qty: (item.qty += payload.qty) }\n            : item\n        ),\n      };\n    }\n    // case CHANGE_CARD: {\n    //   return {\n    //     ...state,\n    //     items: state.item.map((item) =>\n    //       item.id === payload.id\n    //         ? { ...item, qty: (item.qty += payload.qty) }\n    //         : item\n    //     ),\n    //   };\n    // }\n\n    case DELETE_ITEM_CART: {\n      return {\n        ...state,\n        items: state.items.filter((item) => item.id !== payload.id),\n      };\n    }\n\n    case NEW_PRODUCT: {\n      // console.log(action.item);\n      return {\n        ...state,\n        items: action.item,\n      };\n    }\n    case ERROR_CART: {\n      return {\n        ...state,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;\n// console.log(cartReducer);\n"]},"metadata":{},"sourceType":"module"}